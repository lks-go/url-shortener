// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	service "github.com/lks-go/url-shortener/internal/service"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// MakeBatchShortURL provides a mock function with given fields: ctx, userId, urls
func (_m *Service) MakeBatchShortURL(ctx context.Context, userId string, urls []service.URL) ([]service.URL, error) {
	ret := _m.Called(ctx, userId, urls)

	var r0 []service.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []service.URL) ([]service.URL, error)); ok {
		return rf(ctx, userId, urls)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []service.URL) []service.URL); ok {
		r0 = rf(ctx, userId, urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []service.URL) error); ok {
		r1 = rf(ctx, userId, urls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeShortURL provides a mock function with given fields: ctx, userId, url
func (_m *Service) MakeShortURL(ctx context.Context, userId string, url string) (string, error) {
	ret := _m.Called(ctx, userId, url)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, userId, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, userId, url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URL provides a mock function with given fields: ctx, id
func (_m *Service) URL(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersURLs provides a mock function with given fields: ctx, userID
func (_m *Service) UsersURLs(ctx context.Context, userID string) ([]service.UsersURL, error) {
	ret := _m.Called(ctx, userID)

	var r0 []service.UsersURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]service.UsersURL, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []service.UsersURL); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.UsersURL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
